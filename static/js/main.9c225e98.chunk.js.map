{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS_ARRAY","quoteDBUrl","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArray","setQuotesArray","accentColor","setAccentColor","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","id","icon","faQuoteLeft","href","encodeURI","faTwitter","onClick","randomInteger","Math","floor","length","random","getRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAWeA,G,MAXM,CAAC,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,8BCFxCC,EAAa,mFA+CFC,MA7Cf,WACE,MAA0BC,mBAAS,kDAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,qBAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,mBAAS,GAAjD,mBAAqBK,GAArB,WACA,EAAsCL,mBAAS,MAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAsCP,mBAAS,WAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAeS,EAAWC,QAC1BC,QAAQC,IAAIH,GAJM,2CAAH,sDAoBnB,OAbEI,qBAAU,WACRV,EAAYZ,KACX,CAACA,IAYJ,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAAEC,gBAAiBf,GAAzD,SACE,sBAAKgB,GAAI,YAAYF,MAAO,CAAEC,gBAAiBf,GAA/C,UACE,qBAAIgB,GAAI,OAAR,UACE,sBAAMA,GAAG,aAAT,SAAsB,cAAC,IAAD,CAAiBC,KAAMC,QAAsBzB,KAErE,oBAAGuB,GAAG,SAAN,eAAkBrB,KAClB,sBAAKkB,UAAU,UAAf,UACE,oBAAGG,GAAG,cAAcG,KAAMC,UAAU,8EAAD,OAA+E3B,EAA/E,aAAyFE,IAA5H,UAAuI,cAAC,IAAD,CAAiBsB,KAAMI,MAA9J,iBACA,wBAAQL,GAAG,YAAYF,MAAO,CAAEC,gBAAiBf,GAAesB,QAAS,kBAnB1D,WACrB,IAAIC,EAAgBC,KAAKC,MAAM3B,EAAY4B,OAASF,KAAKG,UACzD9B,EAAgB0B,GAChBtB,EAAeZ,EAAakC,IAC5B7B,EAASI,EAAYyB,GAAe9B,OACpCG,EAAUE,EAAYyB,GAAe5B,QAcgDiC,IAA/E,gDClCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9c225e98.chunk.js","sourcesContent":["const COLORS_ARRAY = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n'#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n'#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n'#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n'#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n'#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n'#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n'#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n'#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n'#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\nexport default COLORS_ARRAY;","import react, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport COLORS_ARRAY from \"./colorsArray\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons' \r\n\r\nlet quoteDBUrl = \"https://raw.githubusercontent.com/ryang223/random-quote-machine/main/quotes.json\"\r\n\r\nfunction App() {\r\n  const [quote, setQuote] = useState(\"No fear, no hesitation, no surprise, no doubt.\")\r\n  const [author, setAuthor] = useState(\"Miyamoto Musashi.\")\r\n  const [randomNumber, setRandomNumber] = useState(0)\r\n  const [quotesArray, setQuotesArray] = useState(null)\r\n  const [accentColor, setAccentColor] = useState('#282c34')\r\n\r\n  const fetchQuotes = async (url) => {\r\n    const response = await fetch(url)\r\n    const parsedJSON = await response.json()\r\n    setQuotesArray(parsedJSON.quotes)\r\n    console.log(parsedJSON)\r\n  }\r\n\r\n  useEffect(()=> {\r\n    fetchQuotes(quoteDBUrl)\r\n  }, [quoteDBUrl])\r\n\r\n  const getRandomQuote = () => {\r\n    let randomInteger = Math.floor(quotesArray.length * Math.random())\r\n    setRandomNumber(randomInteger)\r\n    setAccentColor(COLORS_ARRAY[randomInteger])\r\n    setQuote(quotesArray[randomInteger].quote)\r\n    setAuthor(quotesArray[randomInteger].author)\r\n  }\r\n\r\n\r\nreturn (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\" style={{ backgroundColor: accentColor }} >\r\n      <div id =\"quote-box\" style={{ backgroundColor: accentColor }}>\r\n        <h2 id =\"text\">\r\n          <span id=\"quote-icon\"><FontAwesomeIcon icon={faQuoteLeft}/></span>{quote}\r\n        </h2>\r\n        <p id=\"author\">- {author}</p>\r\n        <div className=\"buttons\">\r\n          <a id=\"tweet-quote\" href={encodeURI(`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${quote} -${author}`)}><FontAwesomeIcon icon={faTwitter} />Tweet Quote</a>\r\n          <button id=\"new-quote\" style={{ backgroundColor: accentColor }} onClick={() => getRandomQuote()}>Generate A Random Quote</button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}